org: iagor
app: mimoo-ps
service: mimoo-ps-test
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 128
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.DynamoDBTableName}
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"

functions:
  healthcheck:
    handler: "src/app/Healthcheck/routes/get/index.handler"
    description: Healthcheck to ensure the service is up
    events:
      - http:
          path: healthcheck
          method: get
          cors: true
  get-tools:
    handler: "src/app/Tool/routes/get/index.handler"
    description: Get all tools
    events:
      - http:
          path: tools
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:custom.DynamoDBTableName}
  create-tool:
    handler: "src/app/Tool/routes/create/index.handler"
    description: Create tool
    events:
      - http:
          path: tools
          method: post
          cors: true
    environment:
      TABLE_NAME: ${self:custom.DynamoDBTableName}
  delete-tool:
    handler: "src/app/Tool/routes/delete/index.handler"
    description: Delete tool
    events:
      - http:
          path: tools/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
    environment:
      TABLE_NAME: ${self:custom.DynamoDBTableName}

plugins:
  - serverless-plugin-typescript
  - serverless-stack-output
  - serverless-tscpaths
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies
  - serverless-dynamodb-local
  - serverless-offline
resources:
  Outputs:
    ApiUrl:
      Description: "The API Gateway URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
  Resources:
    dynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.DynamoDBTableName}
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

custom:
  tscpaths:
    core: "@core"
    app: "@app"
  output:
    file: .serverless/output.json
  DynamoDBTableName: ${self:service}-${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  serverless-offline:
    httpPort: 2355
  dynamodb:
    start:
      port: 6577
      inMemory: true
      migrate: true
    stages:
      - ${self:provider.stage}

package:
  patterns:
    - core
    - app
